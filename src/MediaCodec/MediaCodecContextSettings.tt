<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="netstandard" #>
<#@ assembly name="System.Core" #>
<#@ include file="../FFmpegReference.tt" once="true" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="FFmpeg.AutoGen" #>
<#@ output extension=".cs" #>
using FFmpeg.AutoGen;

namespace EmguFFmpeg
{
    public unsafe abstract class MediaCodecContextSettings
    {
        protected AVCodecContext* pCodecContext = null;
    
        public static implicit operator AVCodecContext*(MediaCodecContextSettings value)
        {
            if (value == null) return null;
            return value.pCodecContext;
        }

        public AVCodecContext Context => *pCodecContext;
        
<#   
foreach (var element in typeof(AVCodecContext).GetMembers(BindingFlags.Public | BindingFlags.Instance))
{
    var typeWithName = $"{element}";
    if (element.CustomAttributes.Any(_ => _.AttributeType == typeof(ObsoleteAttribute)) 
    || element.MemberType != MemberTypes.Field || typeWithName.Contains("*") || typeWithName.Contains("_func "))
        continue;
 
    var name = element.Name;
    var tmp = typeWithName.Split(' ');
    var type = tmp[0]        
        .Replace("FFmpeg.AutoGen.","")
        .Replace("Void","void")
        .Replace("Byte","byte")
        .Replace("UInt16","ushort")
        .Replace("Int16","short")
        .Replace("UInt32","uint")
        .Replace("Int32","int")
        .Replace("UInt64","ulong")
        .Replace("Int64","long")
        .Replace("Single","float")
        .Replace("Double","double");
    var pName = string.Join("", tmp[1].Split('_').Select(_=>$"{char.ToUpper(_[0])}{_.Substring(1)}"));
    WriteLine($"        public {type} {pName}");
    WriteLine($"        {"{"}");
    WriteLine($"            get=> pCodecContext->{name};");
    WriteLine($"            set=> pCodecContext->{name} = value;");
    WriteLine($"        {"}"}");
    WriteLine("");
} 
#>
    }   
} 
